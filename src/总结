1.
在 WEB-INF 目录下的 html 应用静态资源时，是当作在 webcontent 根目录下开始访问的
如： 若 html 文件在 /WEB-INF/views/*.html; js 文件夹在 /script/*.js 
则路径为 ../script/*.js
2.
通过 JSON 传数据时，若传输的对象中有其它对象，并且为双向级联关系，则会导致指针指来指去，爆出一个超长的 bug
解决方法：通过新建一个类，用来临时存放需要的数据（不包括级联的对象，只包含了需要的信息），把这个数据作为 JSON 传输的对象
3.
ajax 传递数组时，参数名设为"*[]",后台接收参数时也用"*[]";
4.
在登陆页面的 js 中，url 要加上 user/（用户管理 Controller 的 mapping）;登陆后的页面上就不需要加，原因可能是默认就在 mapping 为 user/ 的 Controller 下继续匹配方法了。
5.
登陆页面的 js 有时候会失效。。
6.
同一个会话登陆两个用户，会导致上一个用户存放在 session 中的信息被覆盖，导致在安全退出时出现异常——将 session 中的唯一一个 user 清楚，另外一个“在线用户”的主页信息就会出问题。
7.
拦截器：
拦截的是带有具体页面地址信息的 uri，如 */views/index.html，无法拦截 servlet 请求 uri,如 */user/index
(后者的拦截只在清除缓存数据后生效，在登陆成功过后，复制 uri，安全退出后再粘贴网址进入，也可以进入到主页中，不过无法获得用户信息，刷新后返回主页。）
说明，是浏览器的缓存在作怪。。
临时解决方法：在 js 中加入一个判断，若获取到的 username 为空则返回登陆页面（会在主页停顿一瞬间。。）
8.
直接通过 uri 进入网页，js处理不当导致网页信息显示有误。
解决方法：判断某个向后台请求的数据是否返回成功，若为 "" ,则不执行自动刷新等操作。